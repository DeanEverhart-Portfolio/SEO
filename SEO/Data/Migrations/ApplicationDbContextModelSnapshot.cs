// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SEO.Data;

#nullable disable

namespace SEO.Data.Migrations
{
    [DbContext(typeof(cup50gu3))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SEO.Models.Ahref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DomainId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("date")
                        .IsRequired()
                        .HasColumnType("DateTime2");

                    b.Property<string>("domain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stringValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("value")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("Ahref");
                });

            modelBuilder.Entity("SEO.Models.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AreaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaCode2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaCode3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateHold")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Doh")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dos")
                        .HasColumnType("DateTime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email21Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2Sort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email3Sort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNamePreference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper2Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gatekeeper3Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GatekeeperNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Hold")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClient")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Map")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2Sort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3Sort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneSort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pronouns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RecordCreated")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("RecordDateInactive")
                        .HasColumnType("DateTime2");

                    b.Property<bool?>("RecordFlag")
                        .HasColumnType("bit");

                    b.Property<bool?>("RecordFlag1")
                        .HasColumnType("bit");

                    b.Property<string>("RecordFlag1String")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordFlagString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RecordInactive")
                        .HasColumnType("bit");

                    b.Property<string>("RecordNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordNote1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RecordSelect")
                        .HasColumnType("bit");

                    b.Property<bool?>("RecordSelect1")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetDesignator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tier1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TownCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website2Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website3Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("SEO.Models.ContactClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Contact")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Contact");

                    b.ToTable("ContactClient");
                });

            modelBuilder.Entity("SEO.Models.Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Protocol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subdomain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topleveldomain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Domain");
                });

            modelBuilder.Entity("SEO.Models.Hog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BoolField1")
                        .HasColumnType("bit");

                    b.Property<bool?>("BoolField2")
                        .HasColumnType("bit");

                    b.Property<bool?>("BoolField3")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateField1")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("DateField2")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("DateField3")
                        .HasColumnType("DateTime2");

                    b.Property<int>("DomainId")
                        .HasColumnType("int");

                    b.Property<int?>("IntField1")
                        .HasColumnType("int");

                    b.Property<int?>("IntField2")
                        .HasColumnType("int");

                    b.Property<int?>("IntField3")
                        .HasColumnType("int");

                    b.Property<string>("StringField1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StringField2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StringField3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("backup")
                        .HasColumnType("bit");

                    b.Property<bool?>("buildExport")
                        .HasColumnType("bit");

                    b.Property<bool?>("content")
                        .HasColumnType("bit");

                    b.Property<bool?>("content1")
                        .HasColumnType("bit");

                    b.Property<bool?>("content2")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("dateBackup")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("dateBuildExport")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("dateContent")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("dateContent1")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("dateContent2")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("dateContent3")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("dateHero")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("dateHog")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("dateHtml")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("dateMeta")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("datePlugin")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("datePost")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("dateSeo")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("dateSite")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime?>("dateTemplate")
                        .HasColumnType("DateTime2");

                    b.Property<bool?>("dev")
                        .HasColumnType("bit");

                    b.Property<bool?>("hero")
                        .HasColumnType("bit");

                    b.Property<bool?>("hero1")
                        .HasColumnType("bit");

                    b.Property<bool?>("hog1")
                        .HasColumnType("bit");

                    b.Property<int?>("hogOld")
                        .HasColumnType("int");

                    b.Property<bool?>("html")
                        .HasColumnType("bit");

                    b.Property<bool?>("keyword")
                        .HasColumnType("bit");

                    b.Property<string>("location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("meta")
                        .HasColumnType("bit");

                    b.Property<bool?>("plugin")
                        .HasColumnType("bit");

                    b.Property<bool?>("post")
                        .HasColumnType("bit");

                    b.Property<bool?>("rerun")
                        .HasColumnType("bit");

                    b.Property<int?>("run")
                        .HasColumnType("int");

                    b.Property<bool?>("seo")
                        .HasColumnType("bit");

                    b.Property<bool?>("site")
                        .HasColumnType("bit");

                    b.Property<string>("stringBackup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stringBuildExport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stringContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stringHero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stringHog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stringKeyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stringKeyword1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stringMeta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stringPost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stringRerun")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stringRun")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stringSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("template")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.ToTable("Hog");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SEO.Models.Ahref", b =>
                {
                    b.HasOne("SEO.Models.Domain", "Domain")
                        .WithMany("Ahrefs")
                        .HasForeignKey("DomainId");

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("SEO.Models.ContactClient", b =>
                {
                    b.HasOne("SEO.Models.Contact", "Contacts")
                        .WithMany("ContactClients")
                        .HasForeignKey("Contact");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("SEO.Models.Domain", b =>
                {
                    b.HasOne("SEO.Models.Contact", "Contact")
                        .WithMany("Domains")
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("SEO.Models.Hog", b =>
                {
                    b.HasOne("SEO.Models.Domain", "Domain")
                        .WithMany("Hogs")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("SEO.Models.Contact", b =>
                {
                    b.Navigation("ContactClients");

                    b.Navigation("Domains");
                });

            modelBuilder.Entity("SEO.Models.Domain", b =>
                {
                    b.Navigation("Ahrefs");

                    b.Navigation("Hogs");
                });
#pragma warning restore 612, 618
        }
    }
}
